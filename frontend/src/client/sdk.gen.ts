// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from "@hey-api/client-axios"
import type {
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginLoginAccessTokenError,
  LoginTestTokenData,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginRecoverPasswordError,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  LoginResetPasswordError,
  LoginRecoverPasswordHtmlContentData,
  LoginRecoverPasswordHtmlContentResponse,
  LoginRecoverPasswordHtmlContentError,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersReadUsersError,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersCreateUserError,
  UsersDeleteUserMeData,
  UsersDeleteUserMeResponse,
  UsersReadUserMeData,
  UsersReadUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdateUserMeError,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersUpdatePasswordMeError,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersRegisterUserError,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UsersDeleteUserError,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersReadUserByIdError,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersUpdateUserError,
  UtilsTestEmailData,
  UtilsTestEmailResponse,
  UtilsTestEmailError,
  UtilsHealthCheckData,
  UtilsHealthCheckResponse,
  ItemsReadItemsData,
  ItemsReadItemsResponse,
  ItemsReadItemsError,
  ItemsCreateItemData,
  ItemsCreateItemResponse,
  ItemsCreateItemError,
  ItemsDeleteItemData,
  ItemsDeleteItemResponse,
  ItemsDeleteItemError,
  ItemsReadItemData,
  ItemsReadItemResponse,
  ItemsReadItemError,
  ItemsUpdateItemData,
  ItemsUpdateItemResponse,
  ItemsUpdateItemError,
  WeatherGetTwoHourForecastData,
  WeatherGetTwoHourForecastResponse,
  WeatherGetTwoHourForecastError,
  WeatherGetAirTemperatureData,
  WeatherGetAirTemperatureResponse,
  WeatherGetAirTemperatureError,
  WeatherGetWindDirectionData,
  WeatherGetWindDirectionResponse,
  WeatherGetWindDirectionError,
  WeatherGetLightningData,
  WeatherGetLightningResponse,
  WeatherGetLightningError,
  WeatherGetWbgtData,
  WeatherGetWbgtResponse,
  WeatherGetWbgtError,
  WeatherGetTwentyFourHourForecastData,
  WeatherGetTwentyFourHourForecastResponse,
  WeatherGetTwentyFourHourForecastError,
  WeatherGetFourDayOutlookData,
  WeatherGetFourDayOutlookResponse,
  WeatherGetFourDayOutlookError,
  PrivateCreateUserData,
  PrivateCreateUserResponse,
  PrivateCreateUserError,
} from "./types.gen"
import { client as _heyApiClient } from "./client.gen"

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Login Access Token
 * OAuth2 compatible token login, get an access token for future requests
 */
export const loginLoginAccessToken = <ThrowOnError extends boolean = false>(
  options: Options<LoginLoginAccessTokenData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LoginLoginAccessTokenResponse,
    LoginLoginAccessTokenError,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/api/v1/login/access-token",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options?.headers,
    },
  })
}

/**
 * Test Token
 * Test access token
 */
export const loginTestToken = <ThrowOnError extends boolean = false>(
  options?: Options<LoginTestTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    LoginTestTokenResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/login/test-token",
    ...options,
  })
}

/**
 * Recover Password
 * Password Recovery
 */
export const loginRecoverPassword = <ThrowOnError extends boolean = false>(
  options: Options<LoginRecoverPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LoginRecoverPasswordResponse,
    LoginRecoverPasswordError,
    ThrowOnError
  >({
    url: "/api/v1/password-recovery/{email}",
    ...options,
  })
}

/**
 * Reset Password
 * Reset password
 */
export const loginResetPassword = <ThrowOnError extends boolean = false>(
  options: Options<LoginResetPasswordData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LoginResetPasswordResponse,
    LoginResetPasswordError,
    ThrowOnError
  >({
    url: "/api/v1/reset-password/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Recover Password Html Content
 * HTML Content for Password Recovery
 */
export const loginRecoverPasswordHtmlContent = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoginRecoverPasswordHtmlContentData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    LoginRecoverPasswordHtmlContentResponse,
    LoginRecoverPasswordHtmlContentError,
    ThrowOnError
  >({
    responseType: "text",
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/password-recovery-html-content/{email}",
    ...options,
  })
}

/**
 * Read Users
 * Retrieve users.
 */
export const usersReadUsers = <ThrowOnError extends boolean = false>(
  options?: Options<UsersReadUsersData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersReadUsersResponse,
    UsersReadUsersError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/",
    ...options,
  })
}

/**
 * Create User
 * Create new user.
 */
export const usersCreateUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersCreateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UsersCreateUserResponse,
    UsersCreateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Delete User Me
 * Delete own user.
 */
export const usersDeleteUserMe = <ThrowOnError extends boolean = false>(
  options?: Options<UsersDeleteUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    UsersDeleteUserMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
  })
}

/**
 * Read User Me
 * Get current user.
 */
export const usersReadUserMe = <ThrowOnError extends boolean = false>(
  options?: Options<UsersReadUserMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UsersReadUserMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
  })
}

/**
 * Update User Me
 * Update own user.
 */
export const usersUpdateUserMe = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdateUserMeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersUpdateUserMeResponse,
    UsersUpdateUserMeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Update Password Me
 * Update own password.
 */
export const usersUpdatePasswordMe = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdatePasswordMeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersUpdatePasswordMeResponse,
    UsersUpdatePasswordMeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/me/password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Register User
 * Create new user without the need to be logged in.
 */
export const usersRegisterUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersRegisterUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UsersRegisterUserResponse,
    UsersRegisterUserError,
    ThrowOnError
  >({
    url: "/api/v1/users/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Delete User
 * Delete a user.
 */
export const usersDeleteUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersDeleteUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    UsersDeleteUserResponse,
    UsersDeleteUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{user_id}",
    ...options,
  })
}

/**
 * Read User By Id
 * Get a specific user by id.
 */
export const usersReadUserById = <ThrowOnError extends boolean = false>(
  options: Options<UsersReadUserByIdData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    UsersReadUserByIdResponse,
    UsersReadUserByIdError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{user_id}",
    ...options,
  })
}

/**
 * Update User
 * Update a user.
 */
export const usersUpdateUser = <ThrowOnError extends boolean = false>(
  options: Options<UsersUpdateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).patch<
    UsersUpdateUserResponse,
    UsersUpdateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/{user_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Test Email
 * Test emails.
 */
export const utilsTestEmail = <ThrowOnError extends boolean = false>(
  options: Options<UtilsTestEmailData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    UtilsTestEmailResponse,
    UtilsTestEmailError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/utils/test-email/",
    ...options,
  })
}

/**
 * Health Check
 */
export const utilsHealthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<UtilsHealthCheckData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    UtilsHealthCheckResponse,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/utils/health-check/",
    ...options,
  })
}

/**
 * Read Items
 * Retrieve items.
 */
export const itemsReadItems = <ThrowOnError extends boolean = false>(
  options?: Options<ItemsReadItemsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ItemsReadItemsResponse,
    ItemsReadItemsError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/items/",
    ...options,
  })
}

/**
 * Create Item
 * Create new item.
 */
export const itemsCreateItem = <ThrowOnError extends boolean = false>(
  options: Options<ItemsCreateItemData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ItemsCreateItemResponse,
    ItemsCreateItemError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/items/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Delete Item
 * Delete an item.
 */
export const itemsDeleteItem = <ThrowOnError extends boolean = false>(
  options: Options<ItemsDeleteItemData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    ItemsDeleteItemResponse,
    ItemsDeleteItemError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/items/{id}",
    ...options,
  })
}

/**
 * Read Item
 * Get item by ID.
 */
export const itemsReadItem = <ThrowOnError extends boolean = false>(
  options: Options<ItemsReadItemData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    ItemsReadItemResponse,
    ItemsReadItemError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/items/{id}",
    ...options,
  })
}

/**
 * Update Item
 * Update an item.
 */
export const itemsUpdateItem = <ThrowOnError extends boolean = false>(
  options: Options<ItemsUpdateItemData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    ItemsUpdateItemResponse,
    ItemsUpdateItemError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/items/{id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}

/**
 * Get Two Hour Forecast
 * Retrieve the latest two hour weather forecast from data.gov.sg API.
 *
 * - Updated half-hourly from NEA
 * - Forecasts are given for multiple areas in Singapore
 */
export const weatherGetTwoHourForecast = <ThrowOnError extends boolean = false>(
  options?: Options<WeatherGetTwoHourForecastData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WeatherGetTwoHourForecastResponse,
    WeatherGetTwoHourForecastError,
    ThrowOnError
  >({
    url: "/api/v1/weather/two-hour-forecast",
    ...options,
  })
}

/**
 * Get Air Temperature
 * Get air temperature readings across Singapore
 *
 * - Has per-minute readings from NEA
 * - Unit of measure for readings is °C
 */
export const weatherGetAirTemperature = <ThrowOnError extends boolean = false>(
  options?: Options<WeatherGetAirTemperatureData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WeatherGetAirTemperatureResponse,
    WeatherGetAirTemperatureError,
    ThrowOnError
  >({
    url: "/api/v1/weather/air-temperature",
    ...options,
  })
}

/**
 * Get Wind Direction
 * Get wind direction readings across Singapore
 *
 * - Has per-minute readings from NEA
 * - Unit of measure for readings is °
 */
export const weatherGetWindDirection = <ThrowOnError extends boolean = false>(
  options?: Options<WeatherGetWindDirectionData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WeatherGetWindDirectionResponse,
    WeatherGetWindDirectionError,
    ThrowOnError
  >({
    url: "/api/v1/weather/wind-direction",
    ...options,
  })
}

/**
 * Get Lightning
 * Retrieve the latest lightning observation
 *
 * - Updated multiple times throughout the day
 */
export const weatherGetLightning = <ThrowOnError extends boolean = false>(
  options?: Options<WeatherGetLightningData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WeatherGetLightningResponse,
    WeatherGetLightningError,
    ThrowOnError
  >({
    url: "/api/v1/weather/lightning",
    ...options,
  })
}

/**
 * Get Wbgt
 * Retrieve the latest WBGT (Wet Bulb Globe Temperature) data for accurate heat stress assessment
 *
 * - Updated multiple times throughout the day
 * - Unit of measure for readings is °C
 */
export const weatherGetWbgt = <ThrowOnError extends boolean = false>(
  options?: Options<WeatherGetWbgtData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WeatherGetWbgtResponse,
    WeatherGetWbgtError,
    ThrowOnError
  >({
    url: "/api/v1/weather/wbgt",
    ...options,
  })
}

/**
 * Get Twenty Four Hour Forecast
 * Retrieve the latest 24 hour weather forecast
 *
 * - Updated multiple times throughout the day
 * - Provides forecasts for different areas of Singapore
 */
export const weatherGetTwentyFourHourForecast = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<WeatherGetTwentyFourHourForecastData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WeatherGetTwentyFourHourForecastResponse,
    WeatherGetTwentyFourHourForecastError,
    ThrowOnError
  >({
    url: "/api/v1/weather/twenty-four-hour-forecast",
    ...options,
  })
}

/**
 * Get Four Day Outlook
 * Retrieve the latest 4 day weather forecast
 *
 * - Updated twice a day from NEA
 * - The forecast is for the next 4 days
 */
export const weatherGetFourDayOutlook = <ThrowOnError extends boolean = false>(
  options?: Options<WeatherGetFourDayOutlookData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    WeatherGetFourDayOutlookResponse,
    WeatherGetFourDayOutlookError,
    ThrowOnError
  >({
    url: "/api/v1/weather/four-day-outlook",
    ...options,
  })
}

/**
 * Create User
 * Create a new user.
 */
export const privateCreateUser = <ThrowOnError extends boolean = false>(
  options: Options<PrivateCreateUserData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PrivateCreateUserResponse,
    PrivateCreateUserError,
    ThrowOnError
  >({
    url: "/api/v1/private/users/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  })
}
