// This file is auto-generated by @hey-api/openapi-ts

export type AirTemperatureData = {
    stations: Array<Station>;
    readings: Array<Reading>;
    readingType: string;
    readingUnit: string;
    paginationToken?: string | null;
};

export type AirTemperatureResponse = {
    code: number;
    errorMsg?: string | null;
    data?: AirTemperatureData | null;
};

export type AreaMetadata = {
    name: string;
    label_location: LabelLocation;
};

export type BodyLoginLoginAccessToken = {
    grant_type?: string | null;
    username: string;
    password: string;
    scope?: string;
    client_id?: string | null;
    client_secret?: string | null;
};

export type ForecastInfo = {
    code?: string | null;
    text: string;
};

export type ForecastItem = {
    date: string;
    updatedTimestamp: string;
    timestamp: string;
    general: GeneralForecast;
    periods?: Array<{
        [key: string]: unknown;
    }> | null;
};

export type ForecastPeriodGeneral = {
    start: string;
    end: string;
    text: string;
};

export type FourDayForecastData = {
    records: Array<FourDayForecastItem>;
    paginationToken?: string | null;
};

export type FourDayForecastItem = {
    date: string;
    updatedTimestamp: string;
    timestamp: string;
    forecasts: Array<{
        [key: string]: unknown;
    }>;
};

export type FourDayForecastResponse = {
    code: number;
    errorMsg?: string | null;
    data?: FourDayForecastData | null;
};

export type GeneralForecast = {
    validPeriod: ForecastPeriodGeneral;
    temperature: TemperatureRange;
    relativeHumidity: HumidityRange;
    forecast: ForecastInfo;
    wind: WindInfo;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type HumidityRange = {
    low: number;
    high: number;
    unit: string;
};

export type ItemCreate = {
    title: string;
    description?: string | null;
};

export type ItemPublic = {
    title: string;
    description?: string | null;
    id: string;
    owner_id: string;
};

export type ItemUpdate = {
    title?: string | null;
    description?: string | null;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type LabelLocation = {
    latitude: number;
    longitude: number;
};

export type LightningData = {
    records: Array<LightningRecord>;
    paginationToken?: string | null;
};

export type LightningRecord = {
    datetime: string;
    item: {
        [key: string]: unknown;
    };
    updated_timestamp?: string | null;
};

export type LightningResponse = {
    code: number;
    errorMsg?: string | null;
    data?: LightningData | null;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type Reading = {
    id?: string | null;
    value?: number | null;
    timestamp: string;
};

export type Station = {
    id: string;
    deviceId?: string | null;
    name: string;
    location: {
        [key: string]: number;
    };
};

export type TemperatureRange = {
    low: number;
    high: number;
    unit: string;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type TwentyFourHourForecastData = {
    area_metadata?: Array<AreaMetadata> | null;
    records: Array<ForecastItem>;
    paginationToken?: string | null;
};

export type TwentyFourHourForecastResponse = {
    code: number;
    errorMsg?: string | null;
    data?: TwentyFourHourForecastData | null;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: string | null;
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: string | null;
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: string | null;
};

export type UserUpdate = {
    email?: string | null;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: string | null;
    password?: string | null;
};

export type UserUpdateMe = {
    full_name?: string | null;
    email?: string | null;
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type WbgtData = {
    records: Array<WbgtRecord>;
    paginationToken?: string | null;
};

export type WbgtRecord = {
    datetime: string;
    item: {
        [key: string]: unknown;
    };
    updated_timestamp?: string | null;
};

export type WbgtResponse = {
    code: number;
    errorMsg?: string | null;
    data?: WbgtData | null;
};

export type WeatherResponse = {
    code: number;
    errorMsg?: string | null;
    data?: {
        [key: string]: unknown;
    } | null;
};

export type WindDirectionData = {
    stations: Array<Station>;
    readings: Array<Reading>;
    readingType: string;
    readingUnit: string;
    paginationToken?: string | null;
};

export type WindDirectionResponse = {
    code: number;
    errorMsg?: string | null;
    data?: WindDirectionData | null;
};

export type WindInfo = {
    speed: {
        [key: string]: unknown;
    };
    direction: string;
};

export type LoginLoginAccessTokenData = {
    body: BodyLoginLoginAccessToken;
    path?: never;
    query?: never;
    url: '/api/v1/login/access-token';
};

export type LoginLoginAccessTokenErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginLoginAccessTokenError = LoginLoginAccessTokenErrors[keyof LoginLoginAccessTokenErrors];

export type LoginLoginAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type LoginLoginAccessTokenResponse = LoginLoginAccessTokenResponses[keyof LoginLoginAccessTokenResponses];

export type LoginTestTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/login/test-token';
};

export type LoginTestTokenResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type LoginTestTokenResponse = LoginTestTokenResponses[keyof LoginTestTokenResponses];

export type LoginRecoverPasswordData = {
    body?: never;
    path: {
        email: string;
    };
    query?: never;
    url: '/api/v1/password-recovery/{email}';
};

export type LoginRecoverPasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginRecoverPasswordError = LoginRecoverPasswordErrors[keyof LoginRecoverPasswordErrors];

export type LoginRecoverPasswordResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type LoginRecoverPasswordResponse = LoginRecoverPasswordResponses[keyof LoginRecoverPasswordResponses];

export type LoginResetPasswordData = {
    body: NewPassword;
    path?: never;
    query?: never;
    url: '/api/v1/reset-password/';
};

export type LoginResetPasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginResetPasswordError = LoginResetPasswordErrors[keyof LoginResetPasswordErrors];

export type LoginResetPasswordResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type LoginResetPasswordResponse = LoginResetPasswordResponses[keyof LoginResetPasswordResponses];

export type LoginRecoverPasswordHtmlContentData = {
    body?: never;
    path: {
        email: string;
    };
    query?: never;
    url: '/api/v1/password-recovery-html-content/{email}';
};

export type LoginRecoverPasswordHtmlContentErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginRecoverPasswordHtmlContentError = LoginRecoverPasswordHtmlContentErrors[keyof LoginRecoverPasswordHtmlContentErrors];

export type LoginRecoverPasswordHtmlContentResponses = {
    /**
     * Successful Response
     */
    200: string;
};

export type LoginRecoverPasswordHtmlContentResponse = LoginRecoverPasswordHtmlContentResponses[keyof LoginRecoverPasswordHtmlContentResponses];

export type UsersReadUsersData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/api/v1/users/';
};

export type UsersReadUsersErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUsersError = UsersReadUsersErrors[keyof UsersReadUsersErrors];

export type UsersReadUsersResponses = {
    /**
     * Successful Response
     */
    200: UsersPublic;
};

export type UsersReadUsersResponse = UsersReadUsersResponses[keyof UsersReadUsersResponses];

export type UsersCreateUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/users/';
};

export type UsersCreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersCreateUserError = UsersCreateUserErrors[keyof UsersCreateUserErrors];

export type UsersCreateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersCreateUserResponse = UsersCreateUserResponses[keyof UsersCreateUserResponses];

export type UsersDeleteUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersDeleteUserMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserMeResponse = UsersDeleteUserMeResponses[keyof UsersDeleteUserMeResponses];

export type UsersReadUserMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersReadUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserMeResponse = UsersReadUserMeResponses[keyof UsersReadUserMeResponses];

export type UsersUpdateUserMeData = {
    body: UserUpdateMe;
    path?: never;
    query?: never;
    url: '/api/v1/users/me';
};

export type UsersUpdateUserMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserMeError = UsersUpdateUserMeErrors[keyof UsersUpdateUserMeErrors];

export type UsersUpdateUserMeResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserMeResponse = UsersUpdateUserMeResponses[keyof UsersUpdateUserMeResponses];

export type UsersUpdatePasswordMeData = {
    body: UpdatePassword;
    path?: never;
    query?: never;
    url: '/api/v1/users/me/password';
};

export type UsersUpdatePasswordMeErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdatePasswordMeError = UsersUpdatePasswordMeErrors[keyof UsersUpdatePasswordMeErrors];

export type UsersUpdatePasswordMeResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersUpdatePasswordMeResponse = UsersUpdatePasswordMeResponses[keyof UsersUpdatePasswordMeResponses];

export type UsersRegisterUserData = {
    body: UserRegister;
    path?: never;
    query?: never;
    url: '/api/v1/users/signup';
};

export type UsersRegisterUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersRegisterUserError = UsersRegisterUserErrors[keyof UsersRegisterUserErrors];

export type UsersRegisterUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersRegisterUserResponse = UsersRegisterUserResponses[keyof UsersRegisterUserResponses];

export type UsersDeleteUserData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersDeleteUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersDeleteUserError = UsersDeleteUserErrors[keyof UsersDeleteUserErrors];

export type UsersDeleteUserResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type UsersDeleteUserResponse = UsersDeleteUserResponses[keyof UsersDeleteUserResponses];

export type UsersReadUserByIdData = {
    body?: never;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersReadUserByIdErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersReadUserByIdError = UsersReadUserByIdErrors[keyof UsersReadUserByIdErrors];

export type UsersReadUserByIdResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersReadUserByIdResponse = UsersReadUserByIdResponses[keyof UsersReadUserByIdResponses];

export type UsersUpdateUserData = {
    body: UserUpdate;
    path: {
        user_id: string;
    };
    query?: never;
    url: '/api/v1/users/{user_id}';
};

export type UsersUpdateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UsersUpdateUserError = UsersUpdateUserErrors[keyof UsersUpdateUserErrors];

export type UsersUpdateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type UsersUpdateUserResponse = UsersUpdateUserResponses[keyof UsersUpdateUserResponses];

export type UtilsTestEmailData = {
    body?: never;
    path?: never;
    query: {
        email_to: string;
    };
    url: '/api/v1/utils/test-email/';
};

export type UtilsTestEmailErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UtilsTestEmailError = UtilsTestEmailErrors[keyof UtilsTestEmailErrors];

export type UtilsTestEmailResponses = {
    /**
     * Successful Response
     */
    201: Message;
};

export type UtilsTestEmailResponse = UtilsTestEmailResponses[keyof UtilsTestEmailResponses];

export type UtilsHealthCheckData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/utils/health-check/';
};

export type UtilsHealthCheckResponses = {
    /**
     * Successful Response
     */
    200: boolean;
};

export type UtilsHealthCheckResponse = UtilsHealthCheckResponses[keyof UtilsHealthCheckResponses];

export type ItemsReadItemsData = {
    body?: never;
    path?: never;
    query?: {
        skip?: number;
        limit?: number;
    };
    url: '/api/v1/items/';
};

export type ItemsReadItemsErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ItemsReadItemsError = ItemsReadItemsErrors[keyof ItemsReadItemsErrors];

export type ItemsReadItemsResponses = {
    /**
     * Successful Response
     */
    200: ItemsPublic;
};

export type ItemsReadItemsResponse = ItemsReadItemsResponses[keyof ItemsReadItemsResponses];

export type ItemsCreateItemData = {
    body: ItemCreate;
    path?: never;
    query?: never;
    url: '/api/v1/items/';
};

export type ItemsCreateItemErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ItemsCreateItemError = ItemsCreateItemErrors[keyof ItemsCreateItemErrors];

export type ItemsCreateItemResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type ItemsCreateItemResponse = ItemsCreateItemResponses[keyof ItemsCreateItemResponses];

export type ItemsDeleteItemData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/items/{id}';
};

export type ItemsDeleteItemErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ItemsDeleteItemError = ItemsDeleteItemErrors[keyof ItemsDeleteItemErrors];

export type ItemsDeleteItemResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type ItemsDeleteItemResponse = ItemsDeleteItemResponses[keyof ItemsDeleteItemResponses];

export type ItemsReadItemData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/items/{id}';
};

export type ItemsReadItemErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ItemsReadItemError = ItemsReadItemErrors[keyof ItemsReadItemErrors];

export type ItemsReadItemResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type ItemsReadItemResponse = ItemsReadItemResponses[keyof ItemsReadItemResponses];

export type ItemsUpdateItemData = {
    body: ItemUpdate;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/v1/items/{id}';
};

export type ItemsUpdateItemErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ItemsUpdateItemError = ItemsUpdateItemErrors[keyof ItemsUpdateItemErrors];

export type ItemsUpdateItemResponses = {
    /**
     * Successful Response
     */
    200: ItemPublic;
};

export type ItemsUpdateItemResponse = ItemsUpdateItemResponses[keyof ItemsUpdateItemResponses];

export type WeatherGetTwoHourForecastData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * SGT date for which to retrieve data (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS)
         */
        date?: string | null;
        /**
         * Pagination token for retrieving subsequent data pages
         */
        pagination_token?: string | null;
    };
    url: '/api/v1/weather/two-hour-forecast';
};

export type WeatherGetTwoHourForecastErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type WeatherGetTwoHourForecastError = WeatherGetTwoHourForecastErrors[keyof WeatherGetTwoHourForecastErrors];

export type WeatherGetTwoHourForecastResponses = {
    /**
     * Successful Response
     */
    200: WeatherResponse;
};

export type WeatherGetTwoHourForecastResponse = WeatherGetTwoHourForecastResponses[keyof WeatherGetTwoHourForecastResponses];

export type WeatherGetAirTemperatureData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Format: YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS (SGT). Example: 2024-07-16 or 2024-07-16T23:59:00
         */
        date?: string | null;
        /**
         * Pagination token for retrieving subsequent data pages
         */
        pagination_token?: string | null;
    };
    url: '/api/v1/weather/air-temperature';
};

export type WeatherGetAirTemperatureErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type WeatherGetAirTemperatureError = WeatherGetAirTemperatureErrors[keyof WeatherGetAirTemperatureErrors];

export type WeatherGetAirTemperatureResponses = {
    /**
     * Successful Response
     */
    200: AirTemperatureResponse;
};

export type WeatherGetAirTemperatureResponse = WeatherGetAirTemperatureResponses[keyof WeatherGetAirTemperatureResponses];

export type WeatherGetWindDirectionData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * SGT date for which to retrieve data (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS)
         */
        date?: string | null;
        /**
         * Pagination token for retrieving subsequent data pages
         */
        pagination_token?: string | null;
    };
    url: '/api/v1/weather/wind-direction';
};

export type WeatherGetWindDirectionErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type WeatherGetWindDirectionError = WeatherGetWindDirectionErrors[keyof WeatherGetWindDirectionErrors];

export type WeatherGetWindDirectionResponses = {
    /**
     * Successful Response
     */
    200: WindDirectionResponse;
};

export type WeatherGetWindDirectionResponse = WeatherGetWindDirectionResponses[keyof WeatherGetWindDirectionResponses];

export type WeatherGetLightningData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * SGT date (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS). Example: 2025-01-16 or 2025-01-16T23:59:00
         */
        date?: string | null;
        /**
         * Pagination token for retrieving subsequent data pages
         */
        pagination_token?: string | null;
    };
    url: '/api/v1/weather/lightning';
};

export type WeatherGetLightningErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type WeatherGetLightningError = WeatherGetLightningErrors[keyof WeatherGetLightningErrors];

export type WeatherGetLightningResponses = {
    /**
     * Successful Response
     */
    200: LightningResponse;
};

export type WeatherGetLightningResponse = WeatherGetLightningResponses[keyof WeatherGetLightningResponses];

export type WeatherGetWbgtData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * SGT date (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS). Example: 2025-01-16 or 2025-01-16T23:59:00
         */
        date?: string | null;
        /**
         * Pagination token for retrieving subsequent data pages
         */
        pagination_token?: string | null;
    };
    url: '/api/v1/weather/wbgt';
};

export type WeatherGetWbgtErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type WeatherGetWbgtError = WeatherGetWbgtErrors[keyof WeatherGetWbgtErrors];

export type WeatherGetWbgtResponses = {
    /**
     * Successful Response
     */
    200: WbgtResponse;
};

export type WeatherGetWbgtResponse = WeatherGetWbgtResponses[keyof WeatherGetWbgtResponses];

export type WeatherGetTwentyFourHourForecastData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * SGT date (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS). Example: 2024-07-16 or 2024-07-16T23:59:00
         */
        date?: string | null;
        /**
         * Pagination token for retrieving subsequent data pages
         */
        pagination_token?: string | null;
    };
    url: '/api/v1/weather/twenty-four-hour-forecast';
};

export type WeatherGetTwentyFourHourForecastErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type WeatherGetTwentyFourHourForecastError = WeatherGetTwentyFourHourForecastErrors[keyof WeatherGetTwentyFourHourForecastErrors];

export type WeatherGetTwentyFourHourForecastResponses = {
    /**
     * Successful Response
     */
    200: TwentyFourHourForecastResponse;
};

export type WeatherGetTwentyFourHourForecastResponse = WeatherGetTwentyFourHourForecastResponses[keyof WeatherGetTwentyFourHourForecastResponses];

export type WeatherGetFourDayOutlookData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * SGT date for which to retrieve data (YYYY-MM-DD or YYYY-MM-DDTHH:MM:SS)
         */
        date?: string | null;
        /**
         * Pagination token for retrieving subsequent data pages
         */
        pagination_token?: string | null;
    };
    url: '/api/v1/weather/four-day-outlook';
};

export type WeatherGetFourDayOutlookErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type WeatherGetFourDayOutlookError = WeatherGetFourDayOutlookErrors[keyof WeatherGetFourDayOutlookErrors];

export type WeatherGetFourDayOutlookResponses = {
    /**
     * Successful Response
     */
    200: FourDayForecastResponse;
};

export type WeatherGetFourDayOutlookResponse = WeatherGetFourDayOutlookResponses[keyof WeatherGetFourDayOutlookResponses];

export type PrivateCreateUserData = {
    body: PrivateUserCreate;
    path?: never;
    query?: never;
    url: '/api/v1/private/users/';
};

export type PrivateCreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type PrivateCreateUserError = PrivateCreateUserErrors[keyof PrivateCreateUserErrors];

export type PrivateCreateUserResponses = {
    /**
     * Successful Response
     */
    200: UserPublic;
};

export type PrivateCreateUserResponse = PrivateCreateUserResponses[keyof PrivateCreateUserResponses];

export type ClientOptions = {
    baseURL: `${string}://${string}` | (string & {});
};